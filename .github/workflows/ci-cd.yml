name: CI/CD Pipeline

on:
  pull_request:
    branches: [master, main]
  push:
    branches: [master, main]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.13'

jobs:

  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend/app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './frontend/app/package-lock.json'
      - name: Install dependencies
        run: npm install
      - name: Run ESLint
        run: npm run lint --if-present
      - name: Run tests
        run: npm test -- --coverage --watchAll=false --passWithNoTests
        env:
          CI: true
      - name: Build application
        run: npm run build
        env:
          REACT_APP_API_BASE_URL: http://localhost:8000
          CI: false
          GENERATE_SOURCEMAP: false

  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: './backend/requirements.txt'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio httpx
      - name: Run linting with flake8
        run: |
          pip install flake8
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Run tests with pytest
        run: |
          pytest -v tests/ --cov=wiki --cov-report=xml --cov-report=html
        env:
          PYTHONPATH: .

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    services:
      backend:
        image: python:3.13-slim
        ports:
          - 8000:8000
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Python for backend
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Setup Node.js for frontend
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install backend dependencies and start server
        run: |
          cd backend
          pip install -r requirements.txt
          uvicorn wiki.main:wiki_exp --host 0.0.0.0 --port 8000 &
          sleep 10
        env:
          PYTHONPATH: ./backend
      - name: Test backend API endpoints
        run: |
          # test basic health check
          curl -f http://localhost:8000/articles/?query=Python || exit 1
          echo "Backend API is responding correctly"
      - name: Build frontend with backend URL
        run: |
          cd frontend
          npm ci
          npm run build
        env:
          REACT_APP_API_BASE_URL: http://localhost:8000

  docker-build-test:
    name: Docker Build Tests
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build backend Docker image
        run: |
          cd backend
          docker build -t wiki-backend:test .
      - name: Build frontend Docker image (production)
        run: |
          cd frontend
          docker build -t wiki-frontend:test -f Dockerfile.prod --build-arg REACT_APP_API_BASE_URL=http://localhost:8000 .
      - name: Build frontend Docker image (development)
        run: |
          cd frontend
          docker build -t wiki-frontend:dev -f Dockerfile.dev --build-arg REACT_APP_API_BASE_URL=http://localhost:8000 .
      - name: Test backend container
        run: |
          docker run --name test-backend -d -p 8001:8000 wiki-backend:test
          sleep 10
          curl -f http://localhost:8001/articles/?query=Test || exit 1
          docker stop test-backend
          docker rm test-backend

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      - name: Setup Node.js for npm audit
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Run npm audit on frontend
        run: |
          cd frontend
          npm audit --audit-level=high
      - name: Setup Python for safety check
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Run safety check on backend
        run: |
          cd backend
          pip install safety
          safety check -r requirements.txt

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

  all-tests-passed:
    name: All Tests Passed
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, integration-test, docker-build-test, security-scan]
    if: always()

    steps:
      - name: Check all job results
        run: |
          echo "Frontend tests: ${{ needs.frontend-test.result }}"
          echo "Backend tests: ${{ needs.backend-test.result }}"
          echo "Integration tests: ${{ needs.integration-test.result }}"
          echo "Docker build tests: ${{ needs.docker-build-test.result }}"
          echo "Security scan: ${{ needs.security-scan.result }}"

          if [[ "${{ needs.frontend-test.result }}" != "success" ||
                "${{ needs.backend-test.result }}" != "success" ||
                "${{ needs.integration-test.result }}" != "success" ||
                "${{ needs.docker-build-test.result }}" != "success" ||
                "${{ needs.security-scan.result }}" != "success" ]]; then
            echo "One or more tests failed!"
            exit 1
          fi

          echo "All tests passed successfully!"

      - name: Post success comment on PR
        if: github.event_name == 'pull_request' && needs.frontend-test.result == 'success' && needs.backend-test.result == 'success'
        uses: actions/github-script@v6
        with:
          script: |-
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'âœ… All tests passed! This PR is ready for review and merge.'
            })
